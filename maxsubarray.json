{
    "main": {
        "id": 2,
        "name": "Maximum Subarray",
        "difficulty": "easy",
        "like_count": 3,
        "dislike_count": 0,
        "status": "none",
        "is_starred": false,
        "like_status": "liked",
        "description_body": "Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n**Example 1:**\n\n```\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n```\n\n**Example 2:**\n\n```\nInput: nums = [1]\nOutput: 1\n```\n\n**Example 3:**\n\n```\nInput: nums = [5,4,-1,7,8]\nOutput: 23\n```\n\n**Constraints:**\n\n-   `1 <= nums.length <= 3 * 104`\n-   `-105 <= nums[i] <= 105`\n\n**Follow-up:** Can you come up with an algorithm that runs in `O(n)` time complexity?",
        "accept_count": 15,
        "submission_count": 1800,
        "acceptance_rate_count": 45,
        "discussion_count": 3500,
        "related_topics": ["Two Sum"],
        "similar_questions": ["Two Sum"],
        "solution_count": 150,
        "code_default_language": "javascript",
        "code_body": {
            "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n    // Your solution code here\n};"
        }
    },
    "editorial": {
        "editorial_body": "# Solution Article\n## Approach: Kadane's Algorithm\n## Algorithm\n\nKadane's Algorithm is a popular dynamic programming technique used to find the maximum subarray sum. It involves iterating through the array and maintaining the maximum subarray sum ending at each position.\n\nThe key idea is to keep track of the maximum sum ending at the current position and update it for each element in the array. If the sum becomes negative, we reset it to zero because a negative sum will not contribute to finding the maximum subarray sum.\n\n## Implementation\n\n```javascript\nvar maxSubArray = function(nums) {\n    let maxEndingHere = 0;\n    let maxSoFar = Number.NEGATIVE_INFINITY;\n\n    for (let i = 0; i < nums.length; i++) {\n        maxEndingHere = Math.max(maxEndingHere + nums[i], nums[i]);\n        maxSoFar = Math.max(maxSoFar, maxEndingHere);\n    }\n\n    return maxSoFar;\n};\n```\n\n## Complexity Analysis\n\n- Time complexity: O(n)\n   We iterate through the array once, so the time complexity is O(n).\n\n- Space complexity: O(1)\n   We use only a constant amount of space.\n"
    },
    "test": [
        [[-2,1,-3,4,-1,2,1,-5,4], 6],
        [[1], 1],
        [[5,4,-1,7,8], 23]
    ],
    "function_name": "maxSubArray"
}
